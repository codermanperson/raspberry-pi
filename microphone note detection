import numpy as np
import sounddevice as sd
from scipy.fft import rfft, rfftfreq
import time
from datetime import datetime
import os
from collections import deque

# Constants
SAMPLE_RATE = 44100
CHUNK_SIZE = 2048
NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
MIN_AMPLITUDE = 0.01  # Base noise floor
VOLUME_THRESHOLD = 0.1  # New: Minimum loudness to detect (0.0-1.0)
LOG_DIR = "music_logs"
BPM = 120
BEAT_VALUE = 60.0 / BPM

# Global variables
current_note = None
note_start_time = None
log_file = None
note_history = deque(maxlen=8)
current_measure = []

def init_log_file():
    global log_file
    os.makedirs(LOG_DIR, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = open(f"{LOG_DIR}/composition_{timestamp}.txt", "w")
    log_file.write(f"# Music Log (Volume Threshold: {VOLUME_THRESHOLD})\n")

def get_current_volume(indata):
    """Calculate RMS volume of current audio chunk"""
    return np.sqrt(np.mean(indata**2))

def freq_to_note(freq):
    if freq < 20:
        return None
    note_num = 12 * (np.log2(freq / 440.0)) + 69
    return NOTE_NAMES[int(round(note_num)) % 12]

def audio_callback(indata, frames, time_info, status):
    global current_note, note_start_time
    
    current_volume = get_current_volume(indata)
    
    # Only process if volume exceeds threshold
    if current_volume < VOLUME_THRESHOLD:
        if current_note:
            duration = time.time() - note_start_time
            log_file.write(f"{duration:.2f}s {current_note}\n")
            current_note = None
        return

    fft_data = np.abs(rfft(indata[:, 0]))
    freqs = rfftfreq(len(indata[:, 0]), 1.0/SAMPLE_RATE)
    peak_index = np.argmax(fft_data)
    peak_freq = freqs[peak_index]
    
    note = freq_to_note(peak_freq)
    if note and note != current_note:
        if current_note:
            duration = time.time() - note_start_time
            log_file.write(f"{duration:.2f}s {current_note}\n")
        current_note = note
        note_start_time = time.time()

def main():
    init_log_file()
    print(f"Starting detection (Volume Threshold: {VOLUME_THRESHOLD})...")
    
    try:
        with sd.InputStream(
            callback=audio_callback,
            channels=1,
            samplerate=SAMPLE_RATE,
            blocksize=CHUNK_SIZE,
            dtype='float32'
        ):
            while True:
                time.sleep(0.1)
    except KeyboardInterrupt:
        print("\nStopping...")
    finally:
        if log_file:
            log_file.close()

if __name__ == "__main__":
    main()
