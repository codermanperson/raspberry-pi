import numpy as np
import sounddevice as sd
from scipy.fft import rfft, rfftfreq
import time
from datetime import datetime
import os
from collections import deque

# Constants for Eb Alto Saxophone
SAMPLE_RATE = 44100
CHUNK_SIZE = 2048
VOLUME_THRESHOLD = 0.05
MIN_FREQ = 100    # Written low Bb (sounds as Db)
MAX_FREQ = 1500   # Written high F (sounds as A)

# Eb Alto Saxophone transposition (written to sounding)
CONCERT_TO_SAX = 9  # Add 9 semitones to concert pitch to get written pitch

# Note names with concert equivalents
NOTE_NAMES = ['Bb', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A']
CONCERT_NAMES = ['Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B', 'C']  # Concert pitches

# Special case for concert C (saxophone written A)
CONCERT_C_SAX_NOTE = 'A'  # When concert C is detected, show "A (C)"

# [Previous constants for stabilization and rhythm remain the same...]

def freq_to_sax_note(freq):
    """Convert frequency to saxophone written pitch with concert reference"""
    if freq < MIN_FREQ or freq > MAX_FREQ:
        return None, None
    
    # Convert frequency to concert pitch
    concert_midi = 12 * np.log2(max(1, freq) / 440.0) + 69
    concert_idx = int(round(concert_midi)) % 12
    concert_note = CONCERT_NAMES[concert_idx]
    
    # Transpose for Eb alto sax
    sax_midi = concert_midi + CONCERT_TO_SAX
    sax_note = NOTE_NAMES[int(round(sax_midi)) % 12]
    
    # Special formatting for concert C
    if concert_note == 'C':
        return f"{CONCERT_C_SAX_NOTE} (C)", concert_note
    return f"{sax_note} ({concert_note})", concert_note

def audio_callback(indata, frames, time_info, status):
    global current_note, note_start_time, stable_frames, last_detected_note
    
    volume = np.sqrt(np.mean(indata**2))
    if volume < VOLUME_THRESHOLD:
        if current_note:
            duration = time.time() - note_start_time
            rhythm = get_rhythm(duration)
            log_file.write(f"{rhythm} {current_note[0]}\n")
            print(f"{rhythm} {current_note[0]}")
            current_note = None
        stable_frames = 0
        return
    
    # [Previous audio processing...]
    
    peak_freq = freqs[valid_mask][np.argmax(fft_data[valid_mask])]
    new_note, concert_note = freq_to_sax_note(peak_freq)  # Now returns tuple
    
    # [Rest of the stabilization logic remains the same...]

# [Rest of the code remains identical...]
